const EXPECTED_SECRET_LENGTH = 44; // string length of base-64 encoding a 32-byte secret
const BASE64_32BYTE_REGEX = /^[A-Za-z0-9+/]{43}=$/;

/**
 * To be able to shut down the server with POST /shutdown/ (e.g. in the mobile app),
 * the server can be run with a secret generated by `openssl rand -base64 32`.
 * This function validates that the given string is a base64-encoded 32-byte secret.
 */
function isValidShutdownSecret(secret) {
    if (typeof secret !== 'string' || secret.length !== EXPECTED_SECRET_LENGTH) {
        return false;
    }

    if (!BASE64_32BYTE_REGEX.test(secret)) {
        return false;
    }

    try {
        const decoded = Buffer.from(secret, 'base64');
        return decoded.length === 32;
    } catch {
        return false;
    }
}

/**
 * Attempts to load the shutdown secret from process.argv[2].
 * Returns null if invalid or missing. It's ok to omit it, but the /shutdown/ route will be disabled.
 */
function getShutdownSecretFromArgs() {
    const rawSecret = process.argv[2];

    if (!isValidShutdownSecret(rawSecret)) {
        return null;
    }

    return rawSecret;
}

/**
 * Compares the incoming request token with the expected shutdown secret.
 */
function verifyShutdownRequest(req, expectedSecret) {
    const token = req.headers['x-shutdown-token'];
    return token === expectedSecret;
}

module.exports = {
    getShutdownSecretFromArgs,
    verifyShutdownRequest,
};
